package com.asr.sab.cal;


import com.asr.sab.utils.SampleBuffer;
import static com.asr.sab.utils.MyMatrixUtils.*;

import org.apache.commons.math3.linear.EigenDecomposition;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.stat.correlation.Covariance;

/**
 * Created by Sarah Blum on 9/21/17
 * Carl von Ossietzky Univesity of Oldenburg.
 */

public class ASR_Calibration {

    private static String LOG_TAG = "ASR_Calibration";

    /**
     * M in matlab
     */
    private double[][] mixingMatrix;

    private double[][] T;

    private double[][] carry;

    private double[][] iir;

    // additional parameters from asr_calibrate in Matlab
    private int cutoff = 5;
    private int blocksize = 10;
    private double window_len = 0.5;
    private double window_overlap = 0.66;
    private double max_dropout_fraction = 0.1;
    private double min_clean_fraction = 0.25;
    private int N = 5;

    // use precomputed filter coefficients
    private final double[] B = {1.7587013141770287, -4.3267624394458641,  5.7999880031015953,
            -6.2396625463547508,  5.3768079046882207, -3.7938218893374835,  2.1649108095226470,
            -0.8591392569863763,  0.2569361125627988};

    private final double[] A = {1.0000000000000000, -1.7008039639301735,  1.9232830391058724,
            -2.0826929726929797,  1.5982638742557307, -1.0735854183930011,  0.5679719225652651,
            -0.1886181499768189,  0.0572954115997261};

    public ASR_Calibration(int channelCount){
        this.mixingMatrix = new double[channelCount][channelCount];
        this.T = new double[channelCount][channelCount];
        this.iir = new double[8][channelCount];
        this.carry = new double[channelCount][25];
    }


    public void asr_calibrate(SampleBuffer buffer, int sR){
        ASR_Calibration state = new ASR_Calibration(buffer.channelCount);

        /*
         * Filter
         */
        double[][] filtered = new double[buffer.channelCount][buffer.getCapacity()];
        double[] channelVal;
        for (int c = 0 ; c < buffer.channelCount; c++){
            channelVal = filter(state.B, state.A, buffer.getValuesFromOneChannel(c));
            filtered[c] = channelVal; // rows = channels
        }

        /**
         * Mixing matrix M
         */

        this.mixingMatrix = calculate_mixingMatrix(filtered, blocksize);


        /*
         * Calculate threshold matrix
         */
        this.T = calculate_thresholdMatrix(filtered, mixingMatrix, sR, N);


    }






}
